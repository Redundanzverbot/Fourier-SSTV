/* autogenerated by Processing revision 1296 on 2025-03-18 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.sound.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Sender extends PApplet {




public void setup(){
  
  /* size commented out by preprocessor */;
  
  background(0);
  textAlign(CENTER);
  textSize(80);
  fill(255);
  text("Generierung des Tongemischs...", width / 2, 700);
  text("Wichtig: Zunächst geringe Lautstärke einstellen!", width / 2, 900);
  
  PImage img = loadImage("image.png");
  //img.resize(160, 120);
  imageMode(CENTER);
  image(img, width / 2, 320, 3*160, 3*120);
}


public void draw(){
  
  if (s == null){
    
    // Geräusch laden
    s = new Signal("image.png");
    
    // Geräusch abspielen
    s.updateSample(this);
    s.sample.loop();
    
    // Speichern der .wav-Datei
    saveBytes("toneSignal.wav", s.exportWav());
    
    // Anzeigen einer Audiowelle
    s.show();
  }
}


// iDFT eines Tongemischs
public float[] inverseFourier(int[] frequencies, int[] amplitudes, int sampleRate){
  
  float[] result = new float[sampleRate];
  
  // Generiere alle Töne
  for (int f = 0; f < frequencies.length; f++){
  
  // Addiere alle Töne zusammen
  float[] freq = generateSequence(frequencies[f], amplitudes[f], sampleRate);
    for (int i = 0; i < sampleRate; i++){
      result[i] += freq[i];
    }
  }
  
  // Anpassen der Lautstärke durch gemeinsamen Skalieren
  result = normalizeWave(result);
  
  return result;
}


// Beschränkt den Zahlenbereich einer Frequenzsumme auf das Intervall [-1.0;1.0]
public float[] normalizeWave(float[] samples){
  
  float max = 0;
  
  for (float f : samples){
    if (abs(f) > max){
      max = abs(f);
    }
  }
  
  for (int i = 0; i < samples.length; i++){
    samples[i] = samples[i] / max;
  }
  
  return samples;
}


// iDFT eines einzelnen Tons
public float[] generateSequence(int f, int a, int N){
  
  float[] result = new float[N];
  float phi = random(TAU);

  // Generiert eine Sinuswelle mit bestimmter Frequenz
  for (int t = 0; t < N; t++){
    result[t] = a * sin((t * f * TAU) / N + phi);
  }

  return result;
}


public void mouseWheel(MouseEvent event) {
  zoom += event.getCount();
  zoom = max(1, zoom);
  s.show();
}
float zoom = 200;
Signal s;

class Signal {
  
  int[] freqs;
  int[] amps;
  
  float[] samples;
  AudioSample sample;
  
  int sampleRate = 44100;
  int blockAlign = 2;
  
  
  Signal(String imageName){
    
    // Laden des Bildes
    PImage img = loadImage(imageName);
    img.resize(160, 120);
    
    // Anlegen der Arrays
    freqs = new int[img.width * img.height + 1];
    amps = new int[img.width * img.height + 1];
    
    // Definieren der Basis-Frequenz
    freqs[0] = 1;
    amps[0] = 255;
    
    // Arrays bestücken
    for (int i = 1; i < amps.length; i++){
      freqs[i] = i + 1;
      amps[i] = (int) brightness(img.pixels[i - 1]);
    }
    
    samples = inverseFourier(freqs, amps, sampleRate);
  }
  
  
  // Debug-Konstruktor
  Signal(int[] frequencies, int[] amplitudes, int sr){
    
    freqs = frequencies;
    sampleRate = sr;
    amps = amplitudes;
    
    samples = inverseFourier(freqs, amps, sampleRate);
  }
  
  
  // Erstellen des AudioSamples
  public void updateSample(PApplet sketchObject){
    sample = new AudioSample(sketchObject, samples, sampleRate);
  }
  
  
  // Abspeichern der .wav-Datei
  public byte[] exportWav(){
    
    byte[] bytes = new byte[samples.length * blockAlign + 44];
    
    // RIFF chunk descriptor
    bytes = insert(bytes, stringToBE("RIFF"), 0);
    bytes = insert(bytes, intToLE(bytes.length - 8, 4), 4);
    bytes = insert(bytes, stringToBE("WAVE"), 8);
    
    // format subchunk
    bytes = insert(bytes, stringToBE("fmt "), 12);
    bytes = insert(bytes, intToLE(16, 4), 16);
    bytes = insert(bytes, intToLE(1, 2), 20);
    bytes = insert(bytes, intToLE(1, 2), 22);
    bytes = insert(bytes, intToLE(sampleRate, 4), 24);
    bytes = insert(bytes, intToLE(sampleRate * blockAlign, 4), 28);
    bytes = insert(bytes, intToLE(blockAlign, 2), 32);
    bytes = insert(bytes, intToLE(blockAlign * 8, 2), 34);
    
    // data subchunk
    bytes = insert(bytes, stringToBE("data"), 36);
    bytes = insert(bytes, intToLE(bytes.length - 44, 4), 40);
    
    for (int i = 0; i < samples.length; i++){
      // Beachte 7: Die Range beinhaltet sowohl den positiven als auch negativen Zahlenbereich
      int sampleVal = PApplet.parseInt(samples[i] * pow(2, (8 * blockAlign) - 1));
      bytes = insert(bytes, intToLE(sampleVal, blockAlign), 44 + i * blockAlign);
    }
    
    return bytes;
  }
  
  
  // Anzeigen der Audiowelle
  public void show(){
    
    float deltaX = (float) width / samples.length;
    float maxY = (float) height / 2;
    
    background(255);
    stroke(220);
    strokeWeight(2);
    pushMatrix();
    translate(0, height / 2);
    
    line(0, 0, width, 0);
    
    stroke(0);
    for (int i = 0; i < floor((float) samples.length / zoom) - 1; i++){
      line(deltaX * i * zoom, -samples[i] * maxY, deltaX * (i + 1) * zoom, -samples[i + 1] * maxY);
    }
    popMatrix();
  }
}
// Fügt ein byte-Array aus einem String zusammen (big endian)
public byte[] stringToBE(String s){
  
  byte[] block = new byte[s.length()];
  
  for (int i = 0; i < block.length; i++){
    block[i] = PApplet.parseByte(s.charAt(i));
  }
  
  return block;
}


// Fügt einen Integer in ein Byte-Array ein (little endian)
public byte[] intToLE(int i, int byteAmount){
  
  byte[] block = new byte[byteAmount];
  
  for (int b = byteAmount - 1; b >= 0; b--){
    int byteVal = floor(i / pow(2, 8 * b));
    block[b] = PApplet.parseByte(byteVal);
    i -= byteVal * pow(2, 8 * b);
  }
  
  return block;
}


// Fügt einen Byte-Block in ein Byte-Array ein
public byte[] insert(byte[] origin, byte[] block, int start){
  
  for (int i = 0; i < block.length; i++){
    origin[start + i] = block[i];
  }
  
  return origin;
}


  public void settings() { fullScreen(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Sender" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
